

## 面向对象

### 面向对象和面向过程

面向对象（Object-Oriented，简称OO）和面向过程（Procedural）是两种主要的编程范式，尽管它们在程序设计和代码结构方面有着根本的不同，但在实际中两者都是可以使用的。

面向对象编程：这种范式基于“对象”的概念，其中对象是包含数据和能够对数据执行操作的方法的实体。它强调的是数据的抽象和封装。

面向过程编程：这种范式侧重于编写一系列的过程或函数来执行任务。每个函数通常代表一个特定的操作或计算步骤。

在面向对象编程中，数据和操作数据的函数通常被封装在一起形成对象。而在面向过程编程中，数据和函数是分开的。同时，面向对象编程通过继承和多态性支持更高的代码重用性和扩展性，所以被用于大型复杂系统的开发，特别是当代码的可重用性、扩展性和维护性非常重要时。面向过程编程则依赖于函数的复制和修改，对于较小的、不太复杂的、可用线性思维解决设计的程序，或者当性能是主要关注点时，它可能更加适用。

两者相辅相成，在解决实际问题时，通过面向对象方式便于我们从宏观上把握事物之间的复杂关系，具体到微观操作时，则仍然使用面向过程的方式来处理。

### 类和对象

类（Class）和对象（Object）是面向对象编程中的两个基本概念，它们之间有着密切但明确的区别：

类是一种抽象的模板，用于描述**一组具有相同属性（数据元素）和行为（方法或函数）的对象**。
特点：类定义了对象的数据结构和可以对这些数据执行的操作。它只是一个规范或蓝图，本身不占用内存。
用途：类用于创建对象实例。它规定了对象的类型和可执行的操作。

#### 类的组成
属性（Attributes）:

定义：属性是类中定义的（方法外的）变量，用于存储对象的状态信息。它们也被称为数据成员、字段或状态。
特点：每个对象（类的实例）都拥有自己的属性值集，这些值定义了对象的特征（例如，一个汽车对象的属性可能包括品牌、颜色、型号等）。

方法（Methods）:

定义：方法是类中定义的函数，用于描述对象可以执行的操作。它们也被称为成员函数或行为。
特点：方法通常操作对象的内部属性，并且可以实现对象间的交互。例如，汽车对象可能有启动（start）和停止（stop）的方法。
构造函数（Constructors）:

定义：构造函数是一种特殊的方法，用于在创建对象时初始化对象的属性。

特点：构造函数通常与类名相同，并且可以有不同的参数，以支持不同方式的初始化。
方法的参数，局部变量.实例属性
```{python}
def __init__(self, age)：
  self.age=age
```
析构函数（Destructors）:

定义：析构函数是在对象不再使用时自动调用的特殊方法，用于资源的清理和释放。
特点：在某些语言中（如C++），显式定义析构函数非常重要，而在像Python和Java这样的语言中，垃圾收集机制通常会处理资源的释放。
访问修饰符（Access Modifiers）:

定义：访问修饰符定义了类成员的访问范围。常见的访问修饰符包括public（公开的）、private（私有的）和protected（受保护的）。
特点：这些修饰符决定了类的哪些部分可以在类的外部被访问或修改，从而提供了封装性和数据隐藏。
静态成员（Static Members）:

定义：静态成员是属于类本身而非类的任何特定对象的属性或方法。
特点：静态成员可以在不创建类的实例的情况下访问，常用于存储类级别的信息。

对象是根据类定义创建的实体。每个对象都有自己的属性和行为。
特点：对象是类的具体实例，占用内存空间。每个对象都拥有独立的属性值，即使它们来自同一个类。
用途：对象是程序执行时操作的实体。程序中的所有操作都是通过调用对象的方法或访问其属性来实现的。
关系和区别:

类是对象的模板：可以把类理解为制造对象的“模具”，而对象是这个模具制造出来的具体“产品”。
独立性：同一个类可以用来创建多个对象，每个对象都有自己独立的属性集合。
内存占用：类本身不占用内存，而对象在创建时占用内存。
例如，在一个类“Car”中，你可以定义属性如“color”和“brand”，以及方法如“drive()”和“stop()”。根据这个类，你可以创建多个对象，如“myCar”和“yourCar”，每个对象都可以有不同的颜色和品牌，但都遵循“Car”类中定义的结构和行为。

理解类和对象之间的区别对于掌握面向对象编程非常重要。类提供了创建和管理对象的框架，而对象是在程序运行时实际操作的实体。

```{python}

```