

## 面向对象编程

### 面向对象和面向过程

面向对象（Object-Oriented，简称OO）和面向过程（Procedural）是两种主要的编程范式，尽管它们在程序设计和代码结构方面有着根本的不同，但在实际中两者都是可以使用的。

面向对象编程：这种范式基于“对象”的概念，其中对象是包含数据和能够对数据执行操作的方法的实体。它强调的是数据的抽象和封装。

面向过程编程：这种范式侧重于编写一系列的过程或函数来执行任务。每个函数通常代表一个特定的操作或计算步骤。

在面向对象编程中，数据和操作数据的函数通常被封装在一起形成对象。而在面向过程编程中，数据和函数是分开的。同时，面向对象编程通过继承和多态性支持更高的代码重用性和扩展性，所以被用于大型复杂系统的开发，特别是当代码的可重用性、扩展性和维护性非常重要时。面向过程编程则依赖于函数的复制和修改，对于较小的、不太复杂的、可用线性思维解决设计的程序，或者当性能是主要关注点时，它可能更加适用。

两者相辅相成，在解决实际问题时，通过面向对象方式便于我们从宏观上把握事物之间的复杂关系，具体到微观操作时，则仍然使用面向过程的方式来处理。

### 面向对象编程的特征

#### 封装

封装是把数据（属性）和操作数据的方法（行为）捆绑在一起形成一个整体（即对象）。在封装中，数据被隐藏，不允许外部直接访问，仅允许通过对象提供的方法来访问和修改这些数据。

#### 继承

继承实现了代码的重用性和可扩展性。继承允许一个类（子类）继承另一个类（父类）的属性和方法。子类可以重用父类的代码，这有助于减少重复代码，并且子类可以**扩展或修改**继承的数据和行为。

#### 多态

### 类和对象

类（Class）和对象（Object）是面向对象编程中的两个基本概念，它们之间有着密切但明确的区别。类是一种抽象的模板，用于描述**一组具有相同属性（即数据元素）和行为（即方法或函数）的对象**。也就是说，在我们创建对象之前，首先要创建一个类，因为它规定了对象的类型和可执行的操作。

#### 类的组成

类的创建需要先定义一个类名，名称必须以大写字母开头，下面是一个简单的例子：

```{python}
class HttpbinSpider:
  # 属性
  name = "httpbin"
  allowed_domains = ["www.httpbin.org"]
  start_urls = ["https://www.httpbin.org/get"]

  # 方法
  def parse(self, response):
    pass

  def printname(self):
    print(self.name)
```

##### 属性（Attributes）:

属性是类中定义的（方法外的）变量，用于存储对象的状态信息。它们也被称为数据成员、字段或状态。

##### 方法（Methods）:

方法是类中定义的函数，用于描述对象可以执行的操作。它们也被称为成员函数或行为。方法中的第一个默认参数必须为`self`，即对类实例自身的引用。它帮助方法区分是哪个对象调用了它。

```{python}
class Classdemo:
  def testdemo():
    print("Hello world")

test = Classdemo()
test.testdemo()
# 报错
```

```{python}
class Getself:
  def get_self(self):
    print(self)

test = Getself()
test.get_self()
print(test)
# 进一步验证方法中传入的就是实例对象本身
```

##### 构造函数（Constructors）:

构造函数`__init__()`是一种特殊的方法，用于在创建对象时初始化对象的属性。构造函数可以有不同的参数，以支持不同方式的初始化。


```{python}
def __init__(self, age)：
  self.age=age
```
析构函数（Destructors）:

定义：析构函数是在对象不再使用时自动调用的特殊方法，用于资源的清理和释放。
特点：在某些语言中（如C++），显式定义析构函数非常重要，而在像Python和Java这样的语言中，垃圾收集机制通常会处理资源的释放。
访问修饰符（Access Modifiers）:

定义：访问修饰符定义了类成员的访问范围。常见的访问修饰符包括public（公开的）、private（私有的）和protected（受保护的）。
特点：这些修饰符决定了类的哪些部分可以在类的外部被访问或修改，从而提供了封装性和数据隐藏。
静态成员（Static Members）:

定义：静态成员是属于类本身而非类的任何特定对象的属性或方法。
特点：静态成员可以在不创建类的实例的情况下访问，常用于存储类级别的信息。

#### 类的继承

根据继承性的特征，我们根据父类创建一个子类：

```{python}
class Fatherclass:
  var = 25
  def printtext(self):
    print('Hello World')


class Childclass(Fatherclass):  # 在括号中声明父类，表明继承自父类
  var = 30                      # 修改属性
  def printvar(self):           # 扩展方法
    print(self.var)

# obj = Childclass()
# obj.printtext()
# obj.printvar()

class Fatherclass2:
  var = 30
  def printtext(self):
    print('Another Greet')
  def printvar(self):
    print(self.var)

class Multiclass(Fatherclass, Fatherclass2):
  pass

# multichild = Multiclass()     # 多重继承，顺序从左至右
# print(multichild.var)         # 不重复的属性和方法进会进行扩展
# multichild.printtext()        # 重复的属性方法则只采用第一次出现的那个
# multichild.printvar()
```

判断某类是否是另一类的子类，用`issubclass()`：

```{python}
print(issubclass(Childclass, Fatherclass))
```

#### 类的组合

#### 类的重写


#### 对象实例化

对象是根据类定义创建的具体实例。每个对象都有自己的属性和行为。Python中处处是对象，例如：

```{python}
age = 25
name = "zhizhifan"
print(type(age))
print(type(name))
# age和name分别是整数和字符串类的实例对象
```

仍以上述的`HttpbinSpider`类为例：

```{python}
obj1 = HttpbinSpider()
# 这样我们就实例化了一个obj1对象，它拥有类中包含的所有属性和方法

print(obj1.name)
obj1.printname()
print(type(obj1))
```

判断对象是否是某个类的实例用`isinstance()`：

```{python}
print(isinstance(obj, Childclass))
print(isinstance(obj, Fatherclass))
```

#### 对象与类的绑定

之前介绍过，类方法中的第一个参数必须为self，这其实是传入了实例对象本身。但同时这也会在程序中将对象与特定的属性和方法相关联，这就是绑定。我们可以对绑定对象的属性进行**添加和修改**。

```{python}
class Fatherclass:
  var = 25
  def printtext(self):
    print(self.var)

  def set_var(self, v):
    var = v

Child = Fatherclass()
Child.printtext()           # 继承父类属性（self.var=25）
# print(Child.__dict__)

Child.var=20                # 改变对象属性
Child.printtext()           # 绑定对象的属性（self.var）变成20

Child.var2 = 30             # 添加新属性
print(Child.__dict__)       # 通过__dict__查看对象所有属性，返回字典

Child.set_var(100)
print(Child.var)            # 由于没有使用self进行绑定，对象的属性不会发生改变
print(Fatherclass.var)      # 也不会改变类的对应属性值，只是创建了局部变量var

```